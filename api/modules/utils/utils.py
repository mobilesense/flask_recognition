# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utils', [dirname(__file__)])
        except ImportError:
            import _utils
            return _utils
        if fp is not None:
            try:
                _mod = imp.load_module('_utils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _utils = swig_import_helper()
    del swig_import_helper
else:
    import _utils
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class hkm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hkm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hkm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nlevel"] = _utils.hkm_t_nlevel_set
    __swig_getmethods__["nlevel"] = _utils.hkm_t_nlevel_get
    if _newclass:nlevel = _swig_property(_utils.hkm_t_nlevel_get, _utils.hkm_t_nlevel_set)
    __swig_setmethods__["bf"] = _utils.hkm_t_bf_set
    __swig_getmethods__["bf"] = _utils.hkm_t_bf_get
    if _newclass:bf = _swig_property(_utils.hkm_t_bf_get, _utils.hkm_t_bf_set)
    __swig_setmethods__["k"] = _utils.hkm_t_k_set
    __swig_getmethods__["k"] = _utils.hkm_t_k_get
    if _newclass:k = _swig_property(_utils.hkm_t_k_get, _utils.hkm_t_k_set)
    __swig_setmethods__["d"] = _utils.hkm_t_d_set
    __swig_getmethods__["d"] = _utils.hkm_t_d_get
    if _newclass:d = _swig_property(_utils.hkm_t_d_get, _utils.hkm_t_d_set)
    __swig_setmethods__["centroids"] = _utils.hkm_t_centroids_set
    __swig_getmethods__["centroids"] = _utils.hkm_t_centroids_get
    if _newclass:centroids = _swig_property(_utils.hkm_t_centroids_get, _utils.hkm_t_centroids_set)
    __swig_setmethods__["balfact"] = _utils.hkm_t_balfact_set
    __swig_getmethods__["balfact"] = _utils.hkm_t_balfact_get
    if _newclass:balfact = _swig_property(_utils.hkm_t_balfact_get, _utils.hkm_t_balfact_set)
    def __init__(self): 
        this = _utils.new_hkm_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utils.delete_hkm_t
    __del__ = lambda self : None;
hkm_t_swigregister = _utils.hkm_t_swigregister
hkm_t_swigregister(hkm_t)


def hkm_learn(*args):
  return _utils.hkm_learn(*args)
hkm_learn = _utils.hkm_learn

def hkm_delete(*args):
  return _utils.hkm_delete(*args)
hkm_delete = _utils.hkm_delete

def hkm_quantize(*args):
  return _utils.hkm_quantize(*args)
hkm_quantize = _utils.hkm_quantize

def hkm_write(*args):
  return _utils.hkm_write(*args)
hkm_write = _utils.hkm_write

def hkm_read(*args):
  return _utils.hkm_read(*args)
hkm_read = _utils.hkm_read

def hkm_get_centroids(*args):
  return _utils.hkm_get_centroids(*args)
hkm_get_centroids = _utils.hkm_get_centroids

def compute_balance_factors(*args):
  return _utils.compute_balance_factors(*args)
compute_balance_factors = _utils.compute_balance_factors

def avl_tree_new():
  return _utils.avl_tree_new()
avl_tree_new = _utils.avl_tree_new

def avl_tree_delete(*args):
  return _utils.avl_tree_delete(*args)
avl_tree_delete = _utils.avl_tree_delete

def avl_tree_add(*args):
  return _utils.avl_tree_add(*args)
avl_tree_add = _utils.avl_tree_add

def avl_tree_remove(*args):
  return _utils.avl_tree_remove(*args)
avl_tree_remove = _utils.avl_tree_remove

def avl_tree_print(*args):
  return _utils.avl_tree_print(*args)
avl_tree_print = _utils.avl_tree_print

def avl_tree_check(*args):
  return _utils.avl_tree_check(*args)
avl_tree_check = _utils.avl_tree_check

def avl_tree_max(*args):
  return _utils.avl_tree_max(*args)
avl_tree_max = _utils.avl_tree_max
PQMODE_STD = _utils.PQMODE_STD
PQMODE_8x8 = _utils.PQMODE_8x8
class pq_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pq_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pq_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _utils.pq_t_d_set
    __swig_getmethods__["d"] = _utils.pq_t_d_get
    if _newclass:d = _swig_property(_utils.pq_t_d_get, _utils.pq_t_d_set)
    __swig_setmethods__["nsq"] = _utils.pq_t_nsq_set
    __swig_getmethods__["nsq"] = _utils.pq_t_nsq_get
    if _newclass:nsq = _swig_property(_utils.pq_t_nsq_get, _utils.pq_t_nsq_set)
    __swig_setmethods__["nsq_bits"] = _utils.pq_t_nsq_bits_set
    __swig_getmethods__["nsq_bits"] = _utils.pq_t_nsq_bits_get
    if _newclass:nsq_bits = _swig_property(_utils.pq_t_nsq_bits_get, _utils.pq_t_nsq_bits_set)
    __swig_setmethods__["ksq"] = _utils.pq_t_ksq_set
    __swig_getmethods__["ksq"] = _utils.pq_t_ksq_get
    if _newclass:ksq = _swig_property(_utils.pq_t_ksq_get, _utils.pq_t_ksq_set)
    __swig_setmethods__["mode"] = _utils.pq_t_mode_set
    __swig_getmethods__["mode"] = _utils.pq_t_mode_get
    if _newclass:mode = _swig_property(_utils.pq_t_mode_get, _utils.pq_t_mode_set)
    __swig_setmethods__["centroids"] = _utils.pq_t_centroids_set
    __swig_getmethods__["centroids"] = _utils.pq_t_centroids_get
    if _newclass:centroids = _swig_property(_utils.pq_t_centroids_get, _utils.pq_t_centroids_set)
    __swig_setmethods__["centroids_dis"] = _utils.pq_t_centroids_dis_set
    __swig_getmethods__["centroids_dis"] = _utils.pq_t_centroids_dis_get
    if _newclass:centroids_dis = _swig_property(_utils.pq_t_centroids_dis_get, _utils.pq_t_centroids_dis_set)
    __swig_setmethods__["sberr"] = _utils.pq_t_sberr_set
    __swig_getmethods__["sberr"] = _utils.pq_t_sberr_get
    if _newclass:sberr = _swig_property(_utils.pq_t_sberr_get, _utils.pq_t_sberr_set)
    __swig_setmethods__["extract_map"] = _utils.pq_t_extract_map_set
    __swig_getmethods__["extract_map"] = _utils.pq_t_extract_map_get
    if _newclass:extract_map = _swig_property(_utils.pq_t_extract_map_get, _utils.pq_t_extract_map_set)
    def __init__(self): 
        this = _utils.new_pq_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utils.delete_pq_t
    __del__ = lambda self : None;
pq_t_swigregister = _utils.pq_t_swigregister
pq_t_swigregister(pq_t)


def pqcode_new(*args):
  return _utils.pqcode_new(*args)
pqcode_new = _utils.pqcode_new

def pqcode_realloc(*args):
  return _utils.pqcode_realloc(*args)
pqcode_realloc = _utils.pqcode_realloc

def pqcode_sizeof(*args):
  return _utils.pqcode_sizeof(*args)
pqcode_sizeof = _utils.pqcode_sizeof

def pqcode_offset(*args):
  return _utils.pqcode_offset(*args)
pqcode_offset = _utils.pqcode_offset

def pqcode_free(*args):
  return _utils.pqcode_free(*args)
pqcode_free = _utils.pqcode_free

def pqcode_fwrite(*args):
  return _utils.pqcode_fwrite(*args)
pqcode_fwrite = _utils.pqcode_fwrite

def pqcode_write(*args):
  return _utils.pqcode_write(*args)
pqcode_write = _utils.pqcode_write

def pqcode_new_fread(*args):
  return _utils.pqcode_new_fread(*args)
pqcode_new_fread = _utils.pqcode_new_fread

def pqcode_new_read(*args):
  return _utils.pqcode_new_read(*args)
pqcode_new_read = _utils.pqcode_new_read

def pqcode_display(*args):
  return _utils.pqcode_display(*args)
pqcode_display = _utils.pqcode_display

def pq_new(*args):
  return _utils.pq_new(*args)
pq_new = _utils.pq_new

def pq_free(*args):
  return _utils.pq_free(*args)
pq_free = _utils.pq_free

def pq_learn(*args):
  return _utils.pq_learn(*args)
pq_learn = _utils.pq_learn

def pq_learn_with_extract_map(*args):
  return _utils.pq_learn_with_extract_map(*args)
pq_learn_with_extract_map = _utils.pq_learn_with_extract_map

def pq_display(*args):
  return _utils.pq_display(*args)
pq_display = _utils.pq_display

def pq_fwrite(*args):
  return _utils.pq_fwrite(*args)
pq_fwrite = _utils.pq_fwrite

def pq_write(*args):
  return _utils.pq_write(*args)
pq_write = _utils.pq_write

def pq_fread(*args):
  return _utils.pq_fread(*args)
pq_fread = _utils.pq_fread

def pq_read(*args):
  return _utils.pq_read(*args)
pq_read = _utils.pq_read

def pq_encode(*args):
  return _utils.pq_encode(*args)
pq_encode = _utils.pq_encode

def pq_decode(*args):
  return _utils.pq_decode(*args)
pq_decode = _utils.pq_decode

def pq_residual(*args):
  return _utils.pq_residual(*args)
pq_residual = _utils.pq_residual

def pq_residual_from_codes(*args):
  return _utils.pq_residual_from_codes(*args)
pq_residual_from_codes = _utils.pq_residual_from_codes

def pq_L2sq_cor(*args):
  return _utils.pq_L2sq_cor(*args)
pq_L2sq_cor = _utils.pq_L2sq_cor

def pq_L2sq(*args):
  return _utils.pq_L2sq(*args)
pq_L2sq = _utils.pq_L2sq

def pq_nns_cor(*args):
  return _utils.pq_nns_cor(*args)
pq_nns_cor = _utils.pq_nns_cor

def pq_nns(*args):
  return _utils.pq_nns(*args)
pq_nns = _utils.pq_nns

def pq_asym_L2sq_cor(*args):
  return _utils.pq_asym_L2sq_cor(*args)
pq_asym_L2sq_cor = _utils.pq_asym_L2sq_cor

def pq_asym_L2sq(*args):
  return _utils.pq_asym_L2sq(*args)
pq_asym_L2sq = _utils.pq_asym_L2sq

def pq_asym_nns_cor(*args):
  return _utils.pq_asym_nns_cor(*args)
pq_asym_nns_cor = _utils.pq_asym_nns_cor

def pq_asym_nns(*args):
  return _utils.pq_asym_nns(*args)
pq_asym_nns = _utils.pq_asym_nns

def pq_asym_fc_nns(*args):
  return _utils.pq_asym_fc_nns(*args)
pq_asym_fc_nns = _utils.pq_asym_fc_nns

def pq_kmeans_clustering(*args):
  return _utils.pq_kmeans_clustering(*args)
pq_kmeans_clustering = _utils.pq_kmeans_clustering

def pq_nns_thread(*args):
  return _utils.pq_nns_thread(*args)
pq_nns_thread = _utils.pq_nns_thread

def pq_asym_nns_thread(*args):
  return _utils.pq_asym_nns_thread(*args)
pq_asym_nns_thread = _utils.pq_asym_nns_thread
class pqr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pqr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pqr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["coa"] = _utils.pqr_t_coa_set
    __swig_getmethods__["coa"] = _utils.pqr_t_coa_get
    if _newclass:coa = _swig_property(_utils.pqr_t_coa_get, _utils.pqr_t_coa_set)
    __swig_setmethods__["resi"] = _utils.pqr_t_resi_set
    __swig_getmethods__["resi"] = _utils.pqr_t_resi_get
    if _newclass:resi = _swig_property(_utils.pqr_t_resi_get, _utils.pqr_t_resi_set)
    def __init__(self): 
        this = _utils.new_pqr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utils.delete_pqr_t
    __del__ = lambda self : None;
pqr_t_swigregister = _utils.pqr_t_swigregister
pqr_t_swigregister(pqr_t)


def pqr_learn(*args):
  return _utils.pqr_learn(*args)
pqr_learn = _utils.pqr_learn

def pqr_free(*args):
  return _utils.pqr_free(*args)
pqr_free = _utils.pqr_free

def pqr_encode(*args):
  return _utils.pqr_encode(*args)
pqr_encode = _utils.pqr_encode

def pqr_decode(*args):
  return _utils.pqr_decode(*args)
pqr_decode = _utils.pqr_decode

def pqr_nns(*args):
  return _utils.pqr_nns(*args)
pqr_nns = _utils.pqr_nns
IVFPQ_FLAG_SYM = _utils.IVFPQ_FLAG_SYM
IVFPQ_FLAG_ASYM = _utils.IVFPQ_FLAG_ASYM
IVFPQ_FLAG_ABSOLUTE = _utils.IVFPQ_FLAG_ABSOLUTE
IVFPQ_FLAG_RELATIVE = _utils.IVFPQ_FLAG_RELATIVE
IVFPQ_FLAG_CENTROID_REAL = _utils.IVFPQ_FLAG_CENTROID_REAL
IVFPQ_FLAG_CENTROID_PQ = _utils.IVFPQ_FLAG_CENTROID_PQ
class ivfpq_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivfpq_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivfpq_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pq"] = _utils.ivfpq_t_pq_set
    __swig_getmethods__["pq"] = _utils.ivfpq_t_pq_get
    if _newclass:pq = _swig_property(_utils.ivfpq_t_pq_get, _utils.ivfpq_t_pq_set)
    __swig_setmethods__["nbvw"] = _utils.ivfpq_t_nbvw_set
    __swig_getmethods__["nbvw"] = _utils.ivfpq_t_nbvw_get
    if _newclass:nbvw = _swig_property(_utils.ivfpq_t_nbvw_get, _utils.ivfpq_t_nbvw_set)
    __swig_setmethods__["nbelems"] = _utils.ivfpq_t_nbelems_set
    __swig_getmethods__["nbelems"] = _utils.ivfpq_t_nbelems_get
    if _newclass:nbelems = _swig_property(_utils.ivfpq_t_nbelems_get, _utils.ivfpq_t_nbelems_set)
    __swig_setmethods__["segsize"] = _utils.ivfpq_t_segsize_set
    __swig_getmethods__["segsize"] = _utils.ivfpq_t_segsize_get
    if _newclass:segsize = _swig_property(_utils.ivfpq_t_segsize_get, _utils.ivfpq_t_segsize_set)
    __swig_setmethods__["labels"] = _utils.ivfpq_t_labels_set
    __swig_getmethods__["labels"] = _utils.ivfpq_t_labels_get
    if _newclass:labels = _swig_property(_utils.ivfpq_t_labels_get, _utils.ivfpq_t_labels_set)
    __swig_setmethods__["codes"] = _utils.ivfpq_t_codes_set
    __swig_getmethods__["codes"] = _utils.ivfpq_t_codes_get
    if _newclass:codes = _swig_property(_utils.ivfpq_t_codes_get, _utils.ivfpq_t_codes_set)
    __swig_setmethods__["flags"] = _utils.ivfpq_t_flags_set
    __swig_getmethods__["flags"] = _utils.ivfpq_t_flags_get
    if _newclass:flags = _swig_property(_utils.ivfpq_t_flags_get, _utils.ivfpq_t_flags_set)
    __swig_setmethods__["centroids"] = _utils.ivfpq_t_centroids_set
    __swig_getmethods__["centroids"] = _utils.ivfpq_t_centroids_get
    if _newclass:centroids = _swig_property(_utils.ivfpq_t_centroids_get, _utils.ivfpq_t_centroids_set)
    __swig_setmethods__["centroids_codes"] = _utils.ivfpq_t_centroids_codes_set
    __swig_getmethods__["centroids_codes"] = _utils.ivfpq_t_centroids_codes_get
    if _newclass:centroids_codes = _swig_property(_utils.ivfpq_t_centroids_codes_get, _utils.ivfpq_t_centroids_codes_set)
    __swig_setmethods__["pq_assign"] = _utils.ivfpq_t_pq_assign_set
    __swig_getmethods__["pq_assign"] = _utils.ivfpq_t_pq_assign_get
    if _newclass:pq_assign = _swig_property(_utils.ivfpq_t_pq_assign_get, _utils.ivfpq_t_pq_assign_set)
    def __init__(self): 
        this = _utils.new_ivfpq_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utils.delete_ivfpq_t
    __del__ = lambda self : None;
ivfpq_t_swigregister = _utils.ivfpq_t_swigregister
ivfpq_t_swigregister(ivfpq_t)


def ivfpq_new(*args):
  return _utils.ivfpq_new(*args)
ivfpq_new = _utils.ivfpq_new

def ivfpq_delete(*args):
  return _utils.ivfpq_delete(*args)
ivfpq_delete = _utils.ivfpq_delete

def ivfpq_add_vw(*args):
  return _utils.ivfpq_add_vw(*args)
ivfpq_add_vw = _utils.ivfpq_add_vw

def ivfpq_query_vw(*args):
  return _utils.ivfpq_query_vw(*args)
ivfpq_query_vw = _utils.ivfpq_query_vw

def ivfpq_count_nbelems(*args):
  return _utils.ivfpq_count_nbelems(*args)
ivfpq_count_nbelems = _utils.ivfpq_count_nbelems

def ivfpq_unbalanced_factor(*args):
  return _utils.ivfpq_unbalanced_factor(*args)
ivfpq_unbalanced_factor = _utils.ivfpq_unbalanced_factor

def ivfpq_dup(*args):
  return _utils.ivfpq_dup(*args)
ivfpq_dup = _utils.ivfpq_dup

def ivfpq_merge(*args):
  return _utils.ivfpq_merge(*args)
ivfpq_merge = _utils.ivfpq_merge

def ivfpq_display(*args):
  return _utils.ivfpq_display(*args)
ivfpq_display = _utils.ivfpq_display

def ivfpq_new_learn(*args):
  return _utils.ivfpq_new_learn(*args)
ivfpq_new_learn = _utils.ivfpq_new_learn

def ivfpq_new_learn_with_extract_map(*args):
  return _utils.ivfpq_new_learn_with_extract_map(*args)
ivfpq_new_learn_with_extract_map = _utils.ivfpq_new_learn_with_extract_map

def ivfpq_add(*args):
  return _utils.ivfpq_add(*args)
ivfpq_add = _utils.ivfpq_add

def ivfpq_add_with_vw(*args):
  return _utils.ivfpq_add_with_vw(*args)
ivfpq_add_with_vw = _utils.ivfpq_add_with_vw

def ivfpq_add_and_get_vw(*args):
  return _utils.ivfpq_add_and_get_vw(*args)
ivfpq_add_and_get_vw = _utils.ivfpq_add_and_get_vw

def ivfpq_query(*args):
  return _utils.ivfpq_query(*args)
ivfpq_query = _utils.ivfpq_query

def ivfpq_query_and_get_vw(*args):
  return _utils.ivfpq_query_and_get_vw(*args)
ivfpq_query_and_get_vw = _utils.ivfpq_query_and_get_vw

def ivfpq_fwrite(*args):
  return _utils.ivfpq_fwrite(*args)
ivfpq_fwrite = _utils.ivfpq_fwrite

def ivfpq_fread(*args):
  return _utils.ivfpq_fread(*args)
ivfpq_fread = _utils.ivfpq_fread
class ivfpq_query_stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivfpq_query_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivfpq_query_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nvisited"] = _utils.ivfpq_query_stats_t_nvisited_set
    __swig_getmethods__["nvisited"] = _utils.ivfpq_query_stats_t_nvisited_get
    if _newclass:nvisited = _swig_property(_utils.ivfpq_query_stats_t_nvisited_get, _utils.ivfpq_query_stats_t_nvisited_set)
    def __init__(self): 
        this = _utils.new_ivfpq_query_stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utils.delete_ivfpq_query_stats_t
    __del__ = lambda self : None;
ivfpq_query_stats_t_swigregister = _utils.ivfpq_query_stats_t_swigregister
ivfpq_query_stats_t_swigregister(ivfpq_query_stats_t)

class ann_vw_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ann_vw_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ann_vw_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nbvw_coarse"] = _utils.ann_vw_t_nbvw_coarse_set
    __swig_getmethods__["nbvw_coarse"] = _utils.ann_vw_t_nbvw_coarse_get
    if _newclass:nbvw_coarse = _swig_property(_utils.ann_vw_t_nbvw_coarse_get, _utils.ann_vw_t_nbvw_coarse_set)
    __swig_setmethods__["nbvw"] = _utils.ann_vw_t_nbvw_set
    __swig_getmethods__["nbvw"] = _utils.ann_vw_t_nbvw_get
    if _newclass:nbvw = _swig_property(_utils.ann_vw_t_nbvw_get, _utils.ann_vw_t_nbvw_set)
    __swig_setmethods__["d"] = _utils.ann_vw_t_d_set
    __swig_getmethods__["d"] = _utils.ann_vw_t_d_get
    if _newclass:d = _swig_property(_utils.ann_vw_t_d_get, _utils.ann_vw_t_d_set)
    __swig_setmethods__["nodes"] = _utils.ann_vw_t_nodes_set
    __swig_getmethods__["nodes"] = _utils.ann_vw_t_nodes_get
    if _newclass:nodes = _swig_property(_utils.ann_vw_t_nodes_get, _utils.ann_vw_t_nodes_set)
    __swig_setmethods__["leaves"] = _utils.ann_vw_t_leaves_set
    __swig_getmethods__["leaves"] = _utils.ann_vw_t_leaves_get
    if _newclass:leaves = _swig_property(_utils.ann_vw_t_leaves_get, _utils.ann_vw_t_leaves_set)
    __swig_setmethods__["n_edge"] = _utils.ann_vw_t_n_edge_set
    __swig_getmethods__["n_edge"] = _utils.ann_vw_t_n_edge_get
    if _newclass:n_edge = _swig_property(_utils.ann_vw_t_n_edge_get, _utils.ann_vw_t_n_edge_set)
    __swig_setmethods__["edges"] = _utils.ann_vw_t_edges_set
    __swig_getmethods__["edges"] = _utils.ann_vw_t_edges_get
    if _newclass:edges = _swig_property(_utils.ann_vw_t_edges_get, _utils.ann_vw_t_edges_set)
    __swig_setmethods__["leave_blocks"] = _utils.ann_vw_t_leave_blocks_set
    __swig_getmethods__["leave_blocks"] = _utils.ann_vw_t_leave_blocks_get
    if _newclass:leave_blocks = _swig_property(_utils.ann_vw_t_leave_blocks_get, _utils.ann_vw_t_leave_blocks_set)
    def __init__(self): 
        this = _utils.new_ann_vw_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utils.delete_ann_vw_t
    __del__ = lambda self : None;
ann_vw_t_swigregister = _utils.ann_vw_t_swigregister
ann_vw_t_swigregister(ann_vw_t)
cvar = _utils.cvar


def load_ann_vw(*args):
  return _utils.load_ann_vw(*args)
load_ann_vw = _utils.load_ann_vw

def free_ann_vw(*args):
  return _utils.free_ann_vw(*args)
free_ann_vw = _utils.free_ann_vw

def ann_vw_describe(*args):
  return _utils.ann_vw_describe(*args)
ann_vw_describe = _utils.ann_vw_describe

def ann_vw_make_blocks(*args):
  return _utils.ann_vw_make_blocks(*args)
ann_vw_make_blocks = _utils.ann_vw_make_blocks

def quantize_codebook_annvw(*args):
  return _utils.quantize_codebook_annvw(*args)
quantize_codebook_annvw = _utils.quantize_codebook_annvw

def quantize_codebook_annvw_thread(*args):
  return _utils.quantize_codebook_annvw_thread(*args)
quantize_codebook_annvw_thread = _utils.quantize_codebook_annvw_thread

def quantize_codebook_annvw_multiple(*args):
  return _utils.quantize_codebook_annvw_multiple(*args)
quantize_codebook_annvw_multiple = _utils.quantize_codebook_annvw_multiple

def quantize_codebook_annvw_multiple_thread(*args):
  return _utils.quantize_codebook_annvw_multiple_thread(*args)
quantize_codebook_annvw_multiple_thread = _utils.quantize_codebook_annvw_multiple_thread

def quantize_codebook_annvw_full_thread(*args):
  return _utils.quantize_codebook_annvw_full_thread(*args)
quantize_codebook_annvw_full_thread = _utils.quantize_codebook_annvw_full_thread

def ann_vw_new(*args):
  return _utils.ann_vw_new(*args)
ann_vw_new = _utils.ann_vw_new

def ann_vw_learn_assign(*args):
  return _utils.ann_vw_learn_assign(*args)
ann_vw_learn_assign = _utils.ann_vw_learn_assign

def ann_vw_make_edges(*args):
  return _utils.ann_vw_make_edges(*args)
ann_vw_make_edges = _utils.ann_vw_make_edges

def ann_vw_write(*args):
  return _utils.ann_vw_write(*args)
ann_vw_write = _utils.ann_vw_write


