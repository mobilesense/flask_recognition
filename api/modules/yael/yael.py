# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yael', [dirname(__file__)])
        except ImportError:
            import _yael
            return _yael
        if fp is not None:
            try:
                _mod = imp.load_module('_yael', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yael = swig_import_helper()
    del swig_import_helper
else:
    import _yael
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _frompointer_and_acquire(aclass,ptr):
  r=aclass.frompointer(ptr)
  if r: r.this.acquire()
  return r

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_DoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_DoubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.DoubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.DoubleArray___setitem__(self, *args)
    def cast(self): return _yael.DoubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.DoubleArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.DoubleArray_frompointer)
    def plus(self, *args): return _yael.DoubleArray_plus(self, *args)
    def clear(self, *args): return _yael.DoubleArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.DoubleArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.DoubleArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.DoubleArray_fromstring(self, *args)
DoubleArray_swigregister = _yael.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

def DoubleArray_frompointer(*args):
  return _yael.DoubleArray_frompointer(*args)
DoubleArray_frompointer = _yael.DoubleArray_frompointer

DoubleArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(DoubleArray,ptr))

class FloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_FloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_FloatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.FloatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.FloatArray___setitem__(self, *args)
    def cast(self): return _yael.FloatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.FloatArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.FloatArray_frompointer)
    def plus(self, *args): return _yael.FloatArray_plus(self, *args)
    def clear(self, *args): return _yael.FloatArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.FloatArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.FloatArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.FloatArray_fromstring(self, *args)
FloatArray_swigregister = _yael.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

def FloatArray_frompointer(*args):
  return _yael.FloatArray_frompointer(*args)
FloatArray_frompointer = _yael.FloatArray_frompointer

FloatArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(FloatArray,ptr))

class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_IntArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.IntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.IntArray___setitem__(self, *args)
    def cast(self): return _yael.IntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.IntArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.IntArray_frompointer)
    def plus(self, *args): return _yael.IntArray_plus(self, *args)
    def clear(self, *args): return _yael.IntArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.IntArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.IntArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.IntArray_fromstring(self, *args)
IntArray_swigregister = _yael.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(*args):
  return _yael.IntArray_frompointer(*args)
IntArray_frompointer = _yael.IntArray_frompointer

IntArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(IntArray,ptr))

class IntPtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_IntPtrArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_IntPtrArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.IntPtrArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.IntPtrArray___setitem__(self, *args)
    def cast(self): return _yael.IntPtrArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.IntPtrArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.IntPtrArray_frompointer)
    def plus(self, *args): return _yael.IntPtrArray_plus(self, *args)
    def clear(self, *args): return _yael.IntPtrArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.IntPtrArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.IntPtrArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.IntPtrArray_fromstring(self, *args)
IntPtrArray_swigregister = _yael.IntPtrArray_swigregister
IntPtrArray_swigregister(IntPtrArray)

def IntPtrArray_frompointer(*args):
  return _yael.IntPtrArray_frompointer(*args)
IntPtrArray_frompointer = _yael.IntPtrArray_frompointer

IntPtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(IntPtrArray,ptr))

class FloatPtrArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPtrArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPtrArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yael.new_FloatPtrArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_FloatPtrArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _yael.FloatPtrArray___getitem__(self, *args)
    def __setitem__(self, *args): return _yael.FloatPtrArray___setitem__(self, *args)
    def cast(self): return _yael.FloatPtrArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _yael.FloatPtrArray_frompointer
    if _newclass:frompointer = staticmethod(_yael.FloatPtrArray_frompointer)
    def plus(self, *args): return _yael.FloatPtrArray_plus(self, *args)
    def clear(self, *args): return _yael.FloatPtrArray_clear(self, *args)
    def copyfrom(self, *args): return _yael.FloatPtrArray_copyfrom(self, *args)
    def tostring(self, *args): return _yael.FloatPtrArray_tostring(self, *args)
    def fromstring(self, *args): return _yael.FloatPtrArray_fromstring(self, *args)
FloatPtrArray_swigregister = _yael.FloatPtrArray_swigregister
FloatPtrArray_swigregister(FloatPtrArray)

def FloatPtrArray_frompointer(*args):
  return _yael.FloatPtrArray_frompointer(*args)
FloatPtrArray_frompointer = _yael.FloatPtrArray_frompointer

FloatPtrArray.acquirepointer=staticmethod(lambda ptr: _frompointer_and_acquire(FloatPtrArray,ptr))


def quantize_codebook_full(*args):
  return _yael.quantize_codebook_full(*args)
quantize_codebook_full = _yael.quantize_codebook_full

def quantize_codebook_full_thread(*args):
  return _yael.quantize_codebook_full_thread(*args)
quantize_codebook_full_thread = _yael.quantize_codebook_full_thread

def quantize_codebook(*args):
  return _yael.quantize_codebook(*args)
quantize_codebook = _yael.quantize_codebook

def quantize_codebook_thread(*args):
  return _yael.quantize_codebook_thread(*args)
quantize_codebook_thread = _yael.quantize_codebook_thread

def quantize_codebook_multiple(*args):
  return _yael.quantize_codebook_multiple(*args)
quantize_codebook_multiple = _yael.quantize_codebook_multiple

def quantize_codebook_multiple_thread(*args):
  return _yael.quantize_codebook_multiple_thread(*args)
quantize_codebook_multiple_thread = _yael.quantize_codebook_multiple_thread

def compute_cross_distances(*args):
  return _yael.compute_cross_distances(*args)
compute_cross_distances = _yael.compute_cross_distances

def compute_cross_distances_nonpacked(*args):
  return _yael.compute_cross_distances_nonpacked(*args)
compute_cross_distances_nonpacked = _yael.compute_cross_distances_nonpacked

def compute_cross_distances_alt(*args):
  return _yael.compute_cross_distances_alt(*args)
compute_cross_distances_alt = _yael.compute_cross_distances_alt

def compute_tasks(*args):
  return _yael.compute_tasks(*args)
compute_tasks = _yael.compute_tasks

def clustering_kmeans(*args):
  return _yael.clustering_kmeans(*args)
clustering_kmeans = _yael.clustering_kmeans

def clustering_kmeans_assign(*args):
  return _yael.clustering_kmeans_assign(*args)
clustering_kmeans_assign = _yael.clustering_kmeans_assign

def clustering_kmeans_assign_trig(*args):
  return _yael.clustering_kmeans_assign_trig(*args)
clustering_kmeans_assign_trig = _yael.clustering_kmeans_assign_trig
CLUSTERING_KMEANS_QUIET = _yael.CLUSTERING_KMEANS_QUIET

def clustering_kmeans_assign_with_score(*args):
  return _yael.clustering_kmeans_assign_with_score(*args)
clustering_kmeans_assign_with_score = _yael.clustering_kmeans_assign_with_score

def clustering_kmedoids(*args):
  return _yael.clustering_kmedoids(*args)
clustering_kmedoids = _yael.clustering_kmedoids

def clustering_kmedoids_from_dists(*args):
  return _yael.clustering_kmedoids_from_dists(*args)
clustering_kmedoids_from_dists = _yael.clustering_kmedoids_from_dists

def clustering_cdm_factors_l2(*args):
  return _yael.clustering_cdm_factors_l2(*args)
clustering_cdm_factors_l2 = _yael.clustering_cdm_factors_l2

def clustering_cdm_factors_dists(*args):
  return _yael.clustering_cdm_factors_dists(*args)
clustering_cdm_factors_dists = _yael.clustering_cdm_factors_dists

def fvec_find_k_max(*args):
  return _yael.fvec_find_k_max(*args)
fvec_find_k_max = _yael.fvec_find_k_max

def fvec_find_k_min(*args):
  return _yael.fvec_find_k_min(*args)
fvec_find_k_min = _yael.fvec_find_k_min

def fvec_ranks_of(*args):
  return _yael.fvec_ranks_of(*args)
fvec_ranks_of = _yael.fvec_ranks_of

def fvec_ranks_inc_of(*args):
  return _yael.fvec_ranks_inc_of(*args)
fvec_ranks_inc_of = _yael.fvec_ranks_inc_of

def find_labels(*args):
  return _yael.find_labels(*args)
find_labels = _yael.find_labels

def fvec_count_0(*args):
  return _yael.fvec_count_0(*args)
fvec_count_0 = _yael.fvec_count_0

def fvec_min(*args):
  return _yael.fvec_min(*args)
fvec_min = _yael.fvec_min

def fvec_max(*args):
  return _yael.fvec_max(*args)
fvec_max = _yael.fvec_max

def fvec_median(*args):
  return _yael.fvec_median(*args)
fvec_median = _yael.fvec_median

def fvec_arg_min(*args):
  return _yael.fvec_arg_min(*args)
fvec_arg_min = _yael.fvec_arg_min

def fvec_quantile(*args):
  return _yael.fvec_quantile(*args)
fvec_quantile = _yael.fvec_quantile

def ivec_sort(*args):
  return _yael.ivec_sort(*args)
ivec_sort = _yael.ivec_sort

def ivec_sort_index(*args):
  return _yael.ivec_sort_index(*args)
ivec_sort_index = _yael.ivec_sort_index

def ivec_invert_perm(*args):
  return _yael.ivec_invert_perm(*args)
ivec_invert_perm = _yael.ivec_invert_perm

def fvec_sort_index(*args):
  return _yael.fvec_sort_index(*args)
fvec_sort_index = _yael.fvec_sort_index

def ivec_sort_by_permutation(*args):
  return _yael.ivec_sort_by_permutation(*args)
ivec_sort_by_permutation = _yael.ivec_sort_by_permutation

def ivec_sorted_count_occurrences(*args):
  return _yael.ivec_sorted_count_occurrences(*args)
ivec_sorted_count_occurrences = _yael.ivec_sorted_count_occurrences

def ivec_sorted_find(*args):
  return _yael.ivec_sorted_find(*args)
ivec_sorted_find = _yael.ivec_sorted_find

def ivec_sorted_count_unique(*args):
  return _yael.ivec_sorted_count_unique(*args)
ivec_sorted_count_unique = _yael.ivec_sorted_count_unique
class heap_entry_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, heap_entry_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, heap_entry_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _yael.heap_entry_t_val_set
    __swig_getmethods__["val"] = _yael.heap_entry_t_val_get
    if _newclass:val = _swig_property(_yael.heap_entry_t_val_get, _yael.heap_entry_t_val_set)
    __swig_setmethods__["label"] = _yael.heap_entry_t_label_set
    __swig_getmethods__["label"] = _yael.heap_entry_t_label_get
    if _newclass:label = _swig_property(_yael.heap_entry_t_label_get, _yael.heap_entry_t_label_set)
    def __init__(self): 
        this = _yael.new_heap_entry_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_heap_entry_t
    __del__ = lambda self : None;
heap_entry_t_swigregister = _yael.heap_entry_t_swigregister
heap_entry_t_swigregister(heap_entry_t)

class maxheap_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maxheap_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maxheap_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _yael.maxheap_t_i_set
    __swig_getmethods__["i"] = _yael.maxheap_t_i_get
    if _newclass:i = _swig_property(_yael.maxheap_t_i_get, _yael.maxheap_t_i_set)
    __swig_setmethods__["n"] = _yael.maxheap_t_n_set
    __swig_getmethods__["n"] = _yael.maxheap_t_n_get
    if _newclass:n = _swig_property(_yael.maxheap_t_n_get, _yael.maxheap_t_n_set)
    __swig_setmethods__["elts"] = _yael.maxheap_t_elts_set
    __swig_getmethods__["elts"] = _yael.maxheap_t_elts_get
    if _newclass:elts = _swig_property(_yael.maxheap_t_elts_get, _yael.maxheap_t_elts_set)
    def __init__(self): 
        this = _yael.new_maxheap_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yael.delete_maxheap_t
    __del__ = lambda self : None;
maxheap_t_swigregister = _yael.maxheap_t_swigregister
maxheap_t_swigregister(maxheap_t)


def maxheap_new(*args):
  return _yael.maxheap_new(*args)
maxheap_new = _yael.maxheap_new

def maxheap_delete(*args):
  return _yael.maxheap_delete(*args)
maxheap_delete = _yael.maxheap_delete

def maxheap_add(*args):
  return _yael.maxheap_add(*args)
maxheap_add = _yael.maxheap_add

def maxheap_pop(*args):
  return _yael.maxheap_pop(*args)
maxheap_pop = _yael.maxheap_pop

def maxheap_add_multiple(*args):
  return _yael.maxheap_add_multiple(*args)
maxheap_add_multiple = _yael.maxheap_add_multiple

def maxheap_add_multiple_labels(*args):
  return _yael.maxheap_add_multiple_labels(*args)
maxheap_add_multiple_labels = _yael.maxheap_add_multiple_labels

def maxheap_sort(*args):
  return _yael.maxheap_sort(*args)
maxheap_sort = _yael.maxheap_sort

def maxheap_sort_labels(*args):
  return _yael.maxheap_sort_labels(*args)
maxheap_sort_labels = _yael.maxheap_sort_labels

def merge_ordered_sets(*args):
  return _yael.merge_ordered_sets(*args)
merge_ordered_sets = _yael.merge_ordered_sets

def compress_labels_by_disratio(*args):
  return _yael.compress_labels_by_disratio(*args)
compress_labels_by_disratio = _yael.compress_labels_by_disratio

def fvec_new(*args):
  return _yael.fvec_new(*args)
fvec_new = _yael.fvec_new

def ivec_new(*args):
  return _yael.ivec_new(*args)
ivec_new = _yael.ivec_new

def fvec_new_0(*args):
  return _yael.fvec_new_0(*args)
fvec_new_0 = _yael.fvec_new_0

def ivec_new_0(*args):
  return _yael.ivec_new_0(*args)
ivec_new_0 = _yael.ivec_new_0

def fvec_new_set(*args):
  return _yael.fvec_new_set(*args)
fvec_new_set = _yael.fvec_new_set

def ivec_new_set(*args):
  return _yael.ivec_new_set(*args)
ivec_new_set = _yael.ivec_new_set

def fvec_new_rand(*args):
  return _yael.fvec_new_rand(*args)
fvec_new_rand = _yael.fvec_new_rand

def ivec_new_range(*args):
  return _yael.ivec_new_range(*args)
ivec_new_range = _yael.ivec_new_range

def ivec_new_copy(*args):
  return _yael.ivec_new_copy(*args)
ivec_new_copy = _yael.ivec_new_copy

def fvec_new_copy(*args):
  return _yael.fvec_new_copy(*args)
fvec_new_copy = _yael.fvec_new_copy

def ivec_new_random_perm(*args):
  return _yael.ivec_new_random_perm(*args)
ivec_new_random_perm = _yael.ivec_new_random_perm

def ivec_new_histogram(*args):
  return _yael.ivec_new_histogram(*args)
ivec_new_histogram = _yael.ivec_new_histogram

def ivec_hash(*args):
  return _yael.ivec_hash(*args)
ivec_hash = _yael.ivec_hash

def ivec_count_occurrences(*args):
  return _yael.ivec_count_occurrences(*args)
ivec_count_occurrences = _yael.ivec_count_occurrences

def ivec_fwrite(*args):
  return _yael.ivec_fwrite(*args)
ivec_fwrite = _yael.ivec_fwrite

def fvec_fwrite(*args):
  return _yael.fvec_fwrite(*args)
fvec_fwrite = _yael.fvec_fwrite

def fvec_fwrite_raw(*args):
  return _yael.fvec_fwrite_raw(*args)
fvec_fwrite_raw = _yael.fvec_fwrite_raw

def ivecs_fwrite(*args):
  return _yael.ivecs_fwrite(*args)
ivecs_fwrite = _yael.ivecs_fwrite

def fvecs_fwrite(*args):
  return _yael.fvecs_fwrite(*args)
fvecs_fwrite = _yael.fvecs_fwrite

def ivecs_write(*args):
  return _yael.ivecs_write(*args)
ivecs_write = _yael.ivecs_write

def fvecs_write(*args):
  return _yael.fvecs_write(*args)
fvecs_write = _yael.fvecs_write

def fvecs_new_read(*args):
  return _yael.fvecs_new_read(*args)
fvecs_new_read = _yael.fvecs_new_read

def fvecs_new_fread_max(*args):
  return _yael.fvecs_new_fread_max(*args)
fvecs_new_fread_max = _yael.fvecs_new_fread_max

def fvecs_new_read_sparse(*args):
  return _yael.fvecs_new_read_sparse(*args)
fvecs_new_read_sparse = _yael.fvecs_new_read_sparse

def fvecs_read(*args):
  return _yael.fvecs_read(*args)
fvecs_read = _yael.fvecs_read

def fvec_read(*args):
  return _yael.fvec_read(*args)
fvec_read = _yael.fvec_read

def fvec_fread(*args):
  return _yael.fvec_fread(*args)
fvec_fread = _yael.fvec_fread

def fvec_fread_raw(*args):
  return _yael.fvec_fread_raw(*args)
fvec_fread_raw = _yael.fvec_fread_raw

def ivec_new_read(*args):
  return _yael.ivec_new_read(*args)
ivec_new_read = _yael.ivec_new_read

def ivec_fread(*args):
  return _yael.ivec_fread(*args)
ivec_fread = _yael.ivec_fread

def ivecs_new_read(*args):
  return _yael.ivecs_new_read(*args)
ivecs_new_read = _yael.ivecs_new_read

def fvec_print(*args):
  return _yael.fvec_print(*args)
fvec_print = _yael.fvec_print

def fvec_fprintf(*args):
  return _yael.fvec_fprintf(*args)
fvec_fprintf = _yael.fvec_fprintf

def ivec_print(*args):
  return _yael.ivec_print(*args)
ivec_print = _yael.ivec_print

def ivec_fprintf(*args):
  return _yael.ivec_fprintf(*args)
ivec_fprintf = _yael.ivec_fprintf

def ivec_index(*args):
  return _yael.ivec_index(*args)
ivec_index = _yael.ivec_index

def fvec_0(*args):
  return _yael.fvec_0(*args)
fvec_0 = _yael.fvec_0

def ivec_0(*args):
  return _yael.ivec_0(*args)
ivec_0 = _yael.ivec_0

def fvec_set(*args):
  return _yael.fvec_set(*args)
fvec_set = _yael.fvec_set

def ivec_set(*args):
  return _yael.ivec_set(*args)
ivec_set = _yael.ivec_set

def fvec_incr(*args):
  return _yael.fvec_incr(*args)
fvec_incr = _yael.fvec_incr

def fvec_decr(*args):
  return _yael.fvec_decr(*args)
fvec_decr = _yael.fvec_decr

def fvec_mul_by(*args):
  return _yael.fvec_mul_by(*args)
fvec_mul_by = _yael.fvec_mul_by

def fvec_div_by(*args):
  return _yael.fvec_div_by(*args)
fvec_div_by = _yael.fvec_div_by

def fvec_add(*args):
  return _yael.fvec_add(*args)
fvec_add = _yael.fvec_add

def fvec_sub(*args):
  return _yael.fvec_sub(*args)
fvec_sub = _yael.fvec_sub

def fvec_mul(*args):
  return _yael.fvec_mul(*args)
fvec_mul = _yael.fvec_mul

def fvec_div(*args):
  return _yael.fvec_div(*args)
fvec_div = _yael.fvec_div

def fvec_normalize(*args):
  return _yael.fvec_normalize(*args)
fvec_normalize = _yael.fvec_normalize

def fvec_sqrt(*args):
  return _yael.fvec_sqrt(*args)
fvec_sqrt = _yael.fvec_sqrt

def fvec_sqr(*args):
  return _yael.fvec_sqr(*args)
fvec_sqr = _yael.fvec_sqr

def fvec_purge_nans(*args):
  return _yael.fvec_purge_nans(*args)
fvec_purge_nans = _yael.fvec_purge_nans

def fvec_sum(*args):
  return _yael.fvec_sum(*args)
fvec_sum = _yael.fvec_sum

def ivec_sum(*args):
  return _yael.ivec_sum(*args)
ivec_sum = _yael.ivec_sum

def ivec_sum_2(*args):
  return _yael.ivec_sum_2(*args)
ivec_sum_2 = _yael.ivec_sum_2

def fvec_norm(*args):
  return _yael.fvec_norm(*args)
fvec_norm = _yael.fvec_norm

def fvec_norm2sqr(*args):
  return _yael.fvec_norm2sqr(*args)
fvec_norm2sqr = _yael.fvec_norm2sqr

def fvec_nz(*args):
  return _yael.fvec_nz(*args)
fvec_nz = _yael.fvec_nz

def ivec_nz(*args):
  return _yael.ivec_nz(*args)
ivec_nz = _yael.ivec_nz

def fvec_find(*args):
  return _yael.fvec_find(*args)
fvec_find = _yael.fvec_find

def ivec_find(*args):
  return _yael.ivec_find(*args)
ivec_find = _yael.ivec_find

def ivec_shuffle(*args):
  return _yael.ivec_shuffle(*args)
ivec_shuffle = _yael.ivec_shuffle

def entropy(*args):
  return _yael.entropy(*args)
entropy = _yael.entropy

def binary_entropy(*args):
  return _yael.binary_entropy(*args)
binary_entropy = _yael.binary_entropy

def ivec_distance_hamming(*args):
  return _yael.ivec_distance_hamming(*args)
ivec_distance_hamming = _yael.ivec_distance_hamming

def fvec_distance_L2(*args):
  return _yael.fvec_distance_L2(*args)
fvec_distance_L2 = _yael.fvec_distance_L2

def fvec_distance_L1(*args):
  return _yael.fvec_distance_L1(*args)
fvec_distance_L1 = _yael.fvec_distance_L1

def fvec_distance_L2sqr(*args):
  return _yael.fvec_distance_L2sqr(*args)
fvec_distance_L2sqr = _yael.fvec_distance_L2sqr

def fvec_inner_product(*args):
  return _yael.fvec_inner_product(*args)
fvec_inner_product = _yael.fvec_inner_product

def fvec_to_spfvec(*args):
  return _yael.fvec_to_spfvec(*args)
fvec_to_spfvec = _yael.fvec_to_spfvec

def ivec_to_spivec(*args):
  return _yael.ivec_to_spivec(*args)
ivec_to_spivec = _yael.ivec_to_spivec

def spfvec_to_fvec(*args):
  return _yael.spfvec_to_fvec(*args)
spfvec_to_fvec = _yael.spfvec_to_fvec

def spivec_to_ivec(*args):
  return _yael.spivec_to_ivec(*args)
spivec_to_ivec = _yael.spivec_to_ivec

def spfvec_inner_product(*args):
  return _yael.spfvec_inner_product(*args)
spfvec_inner_product = _yael.spfvec_inner_product

def ivec_accumulate_slices(*args):
  return _yael.ivec_accumulate_slices(*args)
ivec_accumulate_slices = _yael.ivec_accumulate_slices

def fvec_splat_add(*args):
  return _yael.fvec_splat_add(*args)
fvec_splat_add = _yael.fvec_splat_add

def fvec_isplat_add(*args):
  return _yael.fvec_isplat_add(*args)
fvec_isplat_add = _yael.fvec_isplat_add

def fmat_new(*args):
  return _yael.fmat_new(*args)
fmat_new = _yael.fmat_new

def fmat_mul(*args):
  return _yael.fmat_mul(*args)
fmat_mul = _yael.fmat_mul

def fmat_new_mul(*args):
  return _yael.fmat_new_mul(*args)
fmat_new_mul = _yael.fmat_new_mul

def fmat_mul_tl(*args):
  return _yael.fmat_mul_tl(*args)
fmat_mul_tl = _yael.fmat_mul_tl

def fmat_new_mul_tl(*args):
  return _yael.fmat_new_mul_tl(*args)
fmat_new_mul_tl = _yael.fmat_new_mul_tl

def fmat_mul_tr(*args):
  return _yael.fmat_mul_tr(*args)
fmat_mul_tr = _yael.fmat_mul_tr

def fmat_new_mul_tr(*args):
  return _yael.fmat_new_mul_tr(*args)
fmat_new_mul_tr = _yael.fmat_new_mul_tr

def fmat_mul_tlr(*args):
  return _yael.fmat_mul_tlr(*args)
fmat_mul_tlr = _yael.fmat_mul_tlr

def fmat_new_mul_tlr(*args):
  return _yael.fmat_new_mul_tlr(*args)
fmat_new_mul_tlr = _yael.fmat_new_mul_tlr

def fmat_mul_fvec(*args):
  return _yael.fmat_mul_fvec(*args)
fmat_mul_fvec = _yael.fmat_mul_fvec

def fmat_display(*args):
  return _yael.fmat_display(*args)
fmat_display = _yael.fmat_display

def fmat_get_submatrix(*args):
  return _yael.fmat_get_submatrix(*args)
fmat_get_submatrix = _yael.fmat_get_submatrix

def fmat_get_rows(*args):
  return _yael.fmat_get_rows(*args)
fmat_get_rows = _yael.fmat_get_rows

def fmat_splat_separable(*args):
  return _yael.fmat_splat_separable(*args)
fmat_splat_separable = _yael.fmat_splat_separable

def imat_joint_histogram(*args):
  return _yael.imat_joint_histogram(*args)
imat_joint_histogram = _yael.imat_joint_histogram

def fmat_new_rand_gauss(*args):
  return _yael.fmat_new_rand_gauss(*args)
fmat_new_rand_gauss = _yael.fmat_new_rand_gauss

def random_orthogonal_basis(*args):
  return _yael.random_orthogonal_basis(*args)
random_orthogonal_basis = _yael.random_orthogonal_basis

def hadamard(*args):
  return _yael.hadamard(*args)
hadamard = _yael.hadamard

def compute_pca(*args):
  return _yael.compute_pca(*args)
compute_pca = _yael.compute_pca

def free(*args):
  return _yael.free(*args)
free = _yael.free

def count_cpu():
  return _yael.count_cpu()
count_cpu = _yael.count_cpu

def log2(*args):
  return _yael.log2(*args)
log2 = _yael.log2

def memalign(*args):
  return _yael.memalign(*args)
memalign = _yael.memalign

def common_srandom(*args):
  return _yael.common_srandom(*args)
common_srandom = _yael.common_srandom


