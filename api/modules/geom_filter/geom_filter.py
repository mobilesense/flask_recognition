# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_geom_filter', [dirname(__file__)])
        except ImportError:
            import _geom_filter
            return _geom_filter
        if fp is not None:
            try:
                _mod = imp.load_module('_geom_filter', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _geom_filter = swig_import_helper()
    del swig_import_helper
else:
    import _geom_filter
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def shortlist_new(*args):
  return _geom_filter.shortlist_new(*args)
shortlist_new = _geom_filter.shortlist_new

def shortlist_delete(*args):
  return _geom_filter.shortlist_delete(*args)
shortlist_delete = _geom_filter.shortlist_delete
class pointmatch_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointmatch_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pointmatch_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _geom_filter.pointmatch_t_next_set
    __swig_getmethods__["next"] = _geom_filter.pointmatch_t_next_get
    if _newclass:next = _swig_property(_geom_filter.pointmatch_t_next_get, _geom_filter.pointmatch_t_next_set)
    __swig_setmethods__["score"] = _geom_filter.pointmatch_t_score_set
    __swig_getmethods__["score"] = _geom_filter.pointmatch_t_score_get
    if _newclass:score = _swig_property(_geom_filter.pointmatch_t_score_get, _geom_filter.pointmatch_t_score_set)
    __swig_setmethods__["qpt"] = _geom_filter.pointmatch_t_qpt_set
    __swig_getmethods__["qpt"] = _geom_filter.pointmatch_t_qpt_get
    if _newclass:qpt = _swig_property(_geom_filter.pointmatch_t_qpt_get, _geom_filter.pointmatch_t_qpt_set)
    __swig_setmethods__["dbpt"] = _geom_filter.pointmatch_t_dbpt_set
    __swig_getmethods__["dbpt"] = _geom_filter.pointmatch_t_dbpt_get
    if _newclass:dbpt = _swig_property(_geom_filter.pointmatch_t_dbpt_get, _geom_filter.pointmatch_t_dbpt_set)
    def __init__(self): 
        this = _geom_filter.new_pointmatch_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_pointmatch_t
    __del__ = lambda self : None;
pointmatch_t_swigregister = _geom_filter.pointmatch_t_swigregister
pointmatch_t_swigregister(pointmatch_t)

class imagematch_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imagematch_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imagematch_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fa_pointmatch"] = _geom_filter.imagematch_t_fa_pointmatch_set
    __swig_getmethods__["fa_pointmatch"] = _geom_filter.imagematch_t_fa_pointmatch_get
    if _newclass:fa_pointmatch = _swig_property(_geom_filter.imagematch_t_fa_pointmatch_get, _geom_filter.imagematch_t_fa_pointmatch_set)
    __swig_setmethods__["ptmatches"] = _geom_filter.imagematch_t_ptmatches_set
    __swig_getmethods__["ptmatches"] = _geom_filter.imagematch_t_ptmatches_get
    if _newclass:ptmatches = _swig_property(_geom_filter.imagematch_t_ptmatches_get, _geom_filter.imagematch_t_ptmatches_set)
    __swig_setmethods__["stage1_nmatch"] = _geom_filter.imagematch_t_stage1_nmatch_set
    __swig_getmethods__["stage1_nmatch"] = _geom_filter.imagematch_t_stage1_nmatch_get
    if _newclass:stage1_nmatch = _swig_property(_geom_filter.imagematch_t_stage1_nmatch_get, _geom_filter.imagematch_t_stage1_nmatch_set)
    __swig_setmethods__["stage2_nmatch"] = _geom_filter.imagematch_t_stage2_nmatch_set
    __swig_getmethods__["stage2_nmatch"] = _geom_filter.imagematch_t_stage2_nmatch_get
    if _newclass:stage2_nmatch = _swig_property(_geom_filter.imagematch_t_stage2_nmatch_get, _geom_filter.imagematch_t_stage2_nmatch_set)
    __swig_setmethods__["stage2_votes"] = _geom_filter.imagematch_t_stage2_votes_set
    __swig_getmethods__["stage2_votes"] = _geom_filter.imagematch_t_stage2_votes_get
    if _newclass:stage2_votes = _swig_property(_geom_filter.imagematch_t_stage2_votes_get, _geom_filter.imagematch_t_stage2_votes_set)
    __swig_setmethods__["stage3_nmatch"] = _geom_filter.imagematch_t_stage3_nmatch_set
    __swig_getmethods__["stage3_nmatch"] = _geom_filter.imagematch_t_stage3_nmatch_get
    if _newclass:stage3_nmatch = _swig_property(_geom_filter.imagematch_t_stage3_nmatch_get, _geom_filter.imagematch_t_stage3_nmatch_set)
    __swig_setmethods__["stage3_votes"] = _geom_filter.imagematch_t_stage3_votes_set
    __swig_getmethods__["stage3_votes"] = _geom_filter.imagematch_t_stage3_votes_get
    if _newclass:stage3_votes = _swig_property(_geom_filter.imagematch_t_stage3_votes_get, _geom_filter.imagematch_t_stage3_votes_set)
    __swig_setmethods__["final_votes"] = _geom_filter.imagematch_t_final_votes_set
    __swig_getmethods__["final_votes"] = _geom_filter.imagematch_t_final_votes_get
    if _newclass:final_votes = _swig_property(_geom_filter.imagematch_t_final_votes_get, _geom_filter.imagematch_t_final_votes_set)
    __swig_setmethods__["affine"] = _geom_filter.imagematch_t_affine_set
    __swig_getmethods__["affine"] = _geom_filter.imagematch_t_affine_get
    if _newclass:affine = _swig_property(_geom_filter.imagematch_t_affine_get, _geom_filter.imagematch_t_affine_set)
    __swig_setmethods__["stage3_ids"] = _geom_filter.imagematch_t_stage3_ids_set
    __swig_getmethods__["stage3_ids"] = _geom_filter.imagematch_t_stage3_ids_get
    if _newclass:stage3_ids = _swig_property(_geom_filter.imagematch_t_stage3_ids_get, _geom_filter.imagematch_t_stage3_ids_set)
    def __init__(self): 
        this = _geom_filter.new_imagematch_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_imagematch_t
    __del__ = lambda self : None;
imagematch_t_swigregister = _geom_filter.imagematch_t_swigregister
imagematch_t_swigregister(imagematch_t)


def imagematches_new(*args):
  return _geom_filter.imagematches_new(*args)
imagematches_new = _geom_filter.imagematches_new

def count_ptmatches(*args):
  return _geom_filter.count_ptmatches(*args)
count_ptmatches = _geom_filter.count_ptmatches

def shortlist_match_points_exact(*args):
  return _geom_filter.shortlist_match_points_exact(*args)
shortlist_match_points_exact = _geom_filter.shortlist_match_points_exact

def shortlist_match_points_vw(*args):
  return _geom_filter.shortlist_match_points_vw(*args)
shortlist_match_points_vw = _geom_filter.shortlist_match_points_vw

def imagematch_align_vw(*args):
  return _geom_filter.imagematch_align_vw(*args)
imagematch_align_vw = _geom_filter.imagematch_align_vw

def imagematches_delete(*args):
  return _geom_filter.imagematches_delete(*args)
imagematches_delete = _geom_filter.imagematches_delete
class delta_a_stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, delta_a_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, delta_a_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nbin"] = _geom_filter.delta_a_stats_t_nbin_set
    __swig_getmethods__["nbin"] = _geom_filter.delta_a_stats_t_nbin_get
    if _newclass:nbin = _swig_property(_geom_filter.delta_a_stats_t_nbin_get, _geom_filter.delta_a_stats_t_nbin_set)
    __swig_setmethods__["bins"] = _geom_filter.delta_a_stats_t_bins_set
    __swig_getmethods__["bins"] = _geom_filter.delta_a_stats_t_bins_get
    if _newclass:bins = _swig_property(_geom_filter.delta_a_stats_t_bins_get, _geom_filter.delta_a_stats_t_bins_set)
    __swig_setmethods__["hamming_dist_bins"] = _geom_filter.delta_a_stats_t_hamming_dist_bins_set
    __swig_getmethods__["hamming_dist_bins"] = _geom_filter.delta_a_stats_t_hamming_dist_bins_get
    if _newclass:hamming_dist_bins = _swig_property(_geom_filter.delta_a_stats_t_hamming_dist_bins_get, _geom_filter.delta_a_stats_t_hamming_dist_bins_set)
    __swig_setmethods__["hamming_dist_nbit"] = _geom_filter.delta_a_stats_t_hamming_dist_nbit_set
    __swig_getmethods__["hamming_dist_nbit"] = _geom_filter.delta_a_stats_t_hamming_dist_nbit_get
    if _newclass:hamming_dist_nbit = _swig_property(_geom_filter.delta_a_stats_t_hamming_dist_nbit_get, _geom_filter.delta_a_stats_t_hamming_dist_nbit_set)
    def __init__(self): 
        this = _geom_filter.new_delta_a_stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_delta_a_stats_t
    __del__ = lambda self : None;
delta_a_stats_t_swigregister = _geom_filter.delta_a_stats_t_swigregister
delta_a_stats_t_swigregister(delta_a_stats_t)

class lowehough_parameters_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lowehough_parameters_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lowehough_parameters_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["use_2aff_model"] = _geom_filter.lowehough_parameters_t_use_2aff_model_set
    __swig_getmethods__["use_2aff_model"] = _geom_filter.lowehough_parameters_t_use_2aff_model_get
    if _newclass:use_2aff_model = _swig_property(_geom_filter.lowehough_parameters_t_use_2aff_model_get, _geom_filter.lowehough_parameters_t_use_2aff_model_set)
    __swig_setmethods__["bin_sizes"] = _geom_filter.lowehough_parameters_t_bin_sizes_set
    __swig_getmethods__["bin_sizes"] = _geom_filter.lowehough_parameters_t_bin_sizes_get
    if _newclass:bin_sizes = _swig_property(_geom_filter.lowehough_parameters_t_bin_sizes_get, _geom_filter.lowehough_parameters_t_bin_sizes_set)
    __swig_setmethods__["bin_sizes_2aff"] = _geom_filter.lowehough_parameters_t_bin_sizes_2aff_set
    __swig_getmethods__["bin_sizes_2aff"] = _geom_filter.lowehough_parameters_t_bin_sizes_2aff_get
    if _newclass:bin_sizes_2aff = _swig_property(_geom_filter.lowehough_parameters_t_bin_sizes_2aff_get, _geom_filter.lowehough_parameters_t_bin_sizes_2aff_set)
    __swig_setmethods__["max_nbin"] = _geom_filter.lowehough_parameters_t_max_nbin_set
    __swig_getmethods__["max_nbin"] = _geom_filter.lowehough_parameters_t_max_nbin_get
    if _newclass:max_nbin = _swig_property(_geom_filter.lowehough_parameters_t_max_nbin_get, _geom_filter.lowehough_parameters_t_max_nbin_set)
    __swig_setmethods__["min_match_before_affine"] = _geom_filter.lowehough_parameters_t_min_match_before_affine_set
    __swig_getmethods__["min_match_before_affine"] = _geom_filter.lowehough_parameters_t_min_match_before_affine_get
    if _newclass:min_match_before_affine = _swig_property(_geom_filter.lowehough_parameters_t_min_match_before_affine_get, _geom_filter.lowehough_parameters_t_min_match_before_affine_set)
    __swig_setmethods__["pos_error_in_affine"] = _geom_filter.lowehough_parameters_t_pos_error_in_affine_set
    __swig_getmethods__["pos_error_in_affine"] = _geom_filter.lowehough_parameters_t_pos_error_in_affine_get
    if _newclass:pos_error_in_affine = _swig_property(_geom_filter.lowehough_parameters_t_pos_error_in_affine_get, _geom_filter.lowehough_parameters_t_pos_error_in_affine_set)
    __swig_setmethods__["min_match_after_affine"] = _geom_filter.lowehough_parameters_t_min_match_after_affine_set
    __swig_getmethods__["min_match_after_affine"] = _geom_filter.lowehough_parameters_t_min_match_after_affine_get
    if _newclass:min_match_after_affine = _swig_property(_geom_filter.lowehough_parameters_t_min_match_after_affine_get, _geom_filter.lowehough_parameters_t_min_match_after_affine_set)
    __swig_setmethods__["distinct_tolerance"] = _geom_filter.lowehough_parameters_t_distinct_tolerance_set
    __swig_getmethods__["distinct_tolerance"] = _geom_filter.lowehough_parameters_t_distinct_tolerance_get
    if _newclass:distinct_tolerance = _swig_property(_geom_filter.lowehough_parameters_t_distinct_tolerance_get, _geom_filter.lowehough_parameters_t_distinct_tolerance_set)
    __swig_setmethods__["verbose"] = _geom_filter.lowehough_parameters_t_verbose_set
    __swig_getmethods__["verbose"] = _geom_filter.lowehough_parameters_t_verbose_get
    if _newclass:verbose = _swig_property(_geom_filter.lowehough_parameters_t_verbose_get, _geom_filter.lowehough_parameters_t_verbose_set)
    __swig_setmethods__["weight_deformation"] = _geom_filter.lowehough_parameters_t_weight_deformation_set
    __swig_getmethods__["weight_deformation"] = _geom_filter.lowehough_parameters_t_weight_deformation_get
    if _newclass:weight_deformation = _swig_property(_geom_filter.lowehough_parameters_t_weight_deformation_get, _geom_filter.lowehough_parameters_t_weight_deformation_set)
    __swig_setmethods__["sigma_logscale"] = _geom_filter.lowehough_parameters_t_sigma_logscale_set
    __swig_getmethods__["sigma_logscale"] = _geom_filter.lowehough_parameters_t_sigma_logscale_get
    if _newclass:sigma_logscale = _swig_property(_geom_filter.lowehough_parameters_t_sigma_logscale_get, _geom_filter.lowehough_parameters_t_sigma_logscale_set)
    __swig_setmethods__["sigma_logar"] = _geom_filter.lowehough_parameters_t_sigma_logar_set
    __swig_getmethods__["sigma_logar"] = _geom_filter.lowehough_parameters_t_sigma_logar_get
    if _newclass:sigma_logar = _swig_property(_geom_filter.lowehough_parameters_t_sigma_logar_get, _geom_filter.lowehough_parameters_t_sigma_logar_set)
    __swig_setmethods__["sigma_a1"] = _geom_filter.lowehough_parameters_t_sigma_a1_set
    __swig_getmethods__["sigma_a1"] = _geom_filter.lowehough_parameters_t_sigma_a1_get
    if _newclass:sigma_a1 = _swig_property(_geom_filter.lowehough_parameters_t_sigma_a1_get, _geom_filter.lowehough_parameters_t_sigma_a1_set)
    __swig_setmethods__["sigma_a12"] = _geom_filter.lowehough_parameters_t_sigma_a12_set
    __swig_getmethods__["sigma_a12"] = _geom_filter.lowehough_parameters_t_sigma_a12_get
    if _newclass:sigma_a12 = _swig_property(_geom_filter.lowehough_parameters_t_sigma_a12_get, _geom_filter.lowehough_parameters_t_sigma_a12_set)
    __swig_setmethods__["weight_portrait"] = _geom_filter.lowehough_parameters_t_weight_portrait_set
    __swig_getmethods__["weight_portrait"] = _geom_filter.lowehough_parameters_t_weight_portrait_get
    if _newclass:weight_portrait = _swig_property(_geom_filter.lowehough_parameters_t_weight_portrait_get, _geom_filter.lowehough_parameters_t_weight_portrait_set)
    __swig_setmethods__["min_weight"] = _geom_filter.lowehough_parameters_t_min_weight_set
    __swig_getmethods__["min_weight"] = _geom_filter.lowehough_parameters_t_min_weight_get
    if _newclass:min_weight = _swig_property(_geom_filter.lowehough_parameters_t_min_weight_get, _geom_filter.lowehough_parameters_t_min_weight_set)
    __swig_setmethods__["max_det"] = _geom_filter.lowehough_parameters_t_max_det_set
    __swig_getmethods__["max_det"] = _geom_filter.lowehough_parameters_t_max_det_get
    if _newclass:max_det = _swig_property(_geom_filter.lowehough_parameters_t_max_det_get, _geom_filter.lowehough_parameters_t_max_det_set)
    __swig_setmethods__["min_ar"] = _geom_filter.lowehough_parameters_t_min_ar_set
    __swig_getmethods__["min_ar"] = _geom_filter.lowehough_parameters_t_min_ar_get
    if _newclass:min_ar = _swig_property(_geom_filter.lowehough_parameters_t_min_ar_get, _geom_filter.lowehough_parameters_t_min_ar_set)
    __swig_setmethods__["max_bin_deviation"] = _geom_filter.lowehough_parameters_t_max_bin_deviation_set
    __swig_getmethods__["max_bin_deviation"] = _geom_filter.lowehough_parameters_t_max_bin_deviation_get
    if _newclass:max_bin_deviation = _swig_property(_geom_filter.lowehough_parameters_t_max_bin_deviation_get, _geom_filter.lowehough_parameters_t_max_bin_deviation_set)
    __swig_setmethods__["delta_a_stats"] = _geom_filter.lowehough_parameters_t_delta_a_stats_set
    __swig_getmethods__["delta_a_stats"] = _geom_filter.lowehough_parameters_t_delta_a_stats_get
    if _newclass:delta_a_stats = _swig_property(_geom_filter.lowehough_parameters_t_delta_a_stats_get, _geom_filter.lowehough_parameters_t_delta_a_stats_set)
    def __init__(self): 
        this = _geom_filter.new_lowehough_parameters_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_lowehough_parameters_t
    __del__ = lambda self : None;
lowehough_parameters_t_swigregister = _geom_filter.lowehough_parameters_t_swigregister
lowehough_parameters_t_swigregister(lowehough_parameters_t)


def lowehough_parameters_default(*args):
  return _geom_filter.lowehough_parameters_default(*args)
lowehough_parameters_default = _geom_filter.lowehough_parameters_default

def shortlist_filter_lowehough(*args):
  return _geom_filter.shortlist_filter_lowehough(*args)
shortlist_filter_lowehough = _geom_filter.shortlist_filter_lowehough
class two_image_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, two_image_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, two_image_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pm0"] = _geom_filter.two_image_t_pm0_set
    __swig_getmethods__["pm0"] = _geom_filter.two_image_t_pm0_get
    if _newclass:pm0 = _swig_property(_geom_filter.two_image_t_pm0_get, _geom_filter.two_image_t_pm0_set)
    __swig_setmethods__["score"] = _geom_filter.two_image_t_score_set
    __swig_getmethods__["score"] = _geom_filter.two_image_t_score_get
    if _newclass:score = _swig_property(_geom_filter.two_image_t_score_get, _geom_filter.two_image_t_score_set)
    __swig_setmethods__["n_match"] = _geom_filter.two_image_t_n_match_set
    __swig_getmethods__["n_match"] = _geom_filter.two_image_t_n_match_get
    if _newclass:n_match = _swig_property(_geom_filter.two_image_t_n_match_get, _geom_filter.two_image_t_n_match_set)
    def __init__(self): 
        this = _geom_filter.new_two_image_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_two_image_t
    __del__ = lambda self : None;
two_image_t_swigregister = _geom_filter.two_image_t_swigregister
two_image_t_swigregister(two_image_t)

class ptset_bbox_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ptset_bbox_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ptset_bbox_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xmin"] = _geom_filter.ptset_bbox_t_xmin_set
    __swig_getmethods__["xmin"] = _geom_filter.ptset_bbox_t_xmin_get
    if _newclass:xmin = _swig_property(_geom_filter.ptset_bbox_t_xmin_get, _geom_filter.ptset_bbox_t_xmin_set)
    __swig_setmethods__["ymin"] = _geom_filter.ptset_bbox_t_ymin_set
    __swig_getmethods__["ymin"] = _geom_filter.ptset_bbox_t_ymin_get
    if _newclass:ymin = _swig_property(_geom_filter.ptset_bbox_t_ymin_get, _geom_filter.ptset_bbox_t_ymin_set)
    __swig_setmethods__["xmax"] = _geom_filter.ptset_bbox_t_xmax_set
    __swig_getmethods__["xmax"] = _geom_filter.ptset_bbox_t_xmax_get
    if _newclass:xmax = _swig_property(_geom_filter.ptset_bbox_t_xmax_get, _geom_filter.ptset_bbox_t_xmax_set)
    __swig_setmethods__["ymax"] = _geom_filter.ptset_bbox_t_ymax_set
    __swig_getmethods__["ymax"] = _geom_filter.ptset_bbox_t_ymax_get
    if _newclass:ymax = _swig_property(_geom_filter.ptset_bbox_t_ymax_get, _geom_filter.ptset_bbox_t_ymax_set)
    def __init__(self): 
        this = _geom_filter.new_ptset_bbox_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_ptset_bbox_t
    __del__ = lambda self : None;
ptset_bbox_t_swigregister = _geom_filter.ptset_bbox_t_swigregister
ptset_bbox_t_swigregister(ptset_bbox_t)


def ptset_bbox_count_pts(*args):
  return _geom_filter.ptset_bbox_count_pts(*args)
ptset_bbox_count_pts = _geom_filter.ptset_bbox_count_pts
class image_pairs_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, image_pairs_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, image_pairs_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pairs"] = _geom_filter.image_pairs_t_pairs_set
    __swig_getmethods__["pairs"] = _geom_filter.image_pairs_t_pairs_get
    if _newclass:pairs = _swig_property(_geom_filter.image_pairs_t_pairs_get, _geom_filter.image_pairs_t_pairs_set)
    __swig_setmethods__["n_pair"] = _geom_filter.image_pairs_t_n_pair_set
    __swig_getmethods__["n_pair"] = _geom_filter.image_pairs_t_n_pair_get
    if _newclass:n_pair = _swig_property(_geom_filter.image_pairs_t_n_pair_get, _geom_filter.image_pairs_t_n_pair_set)
    __swig_setmethods__["im0"] = _geom_filter.image_pairs_t_im0_set
    __swig_getmethods__["im0"] = _geom_filter.image_pairs_t_im0_get
    if _newclass:im0 = _swig_property(_geom_filter.image_pairs_t_im0_get, _geom_filter.image_pairs_t_im0_set)
    __swig_setmethods__["im1"] = _geom_filter.image_pairs_t_im1_set
    __swig_getmethods__["im1"] = _geom_filter.image_pairs_t_im1_get
    if _newclass:im1 = _swig_property(_geom_filter.image_pairs_t_im1_get, _geom_filter.image_pairs_t_im1_set)
    __swig_setmethods__["imm"] = _geom_filter.image_pairs_t_imm_set
    __swig_getmethods__["imm"] = _geom_filter.image_pairs_t_imm_get
    if _newclass:imm = _swig_property(_geom_filter.image_pairs_t_imm_get, _geom_filter.image_pairs_t_imm_set)
    __swig_setmethods__["bbox0"] = _geom_filter.image_pairs_t_bbox0_set
    __swig_getmethods__["bbox0"] = _geom_filter.image_pairs_t_bbox0_get
    if _newclass:bbox0 = _swig_property(_geom_filter.image_pairs_t_bbox0_get, _geom_filter.image_pairs_t_bbox0_set)
    __swig_setmethods__["bbox1"] = _geom_filter.image_pairs_t_bbox1_set
    __swig_getmethods__["bbox1"] = _geom_filter.image_pairs_t_bbox1_get
    if _newclass:bbox1 = _swig_property(_geom_filter.image_pairs_t_bbox1_get, _geom_filter.image_pairs_t_bbox1_set)
    def __init__(self): 
        this = _geom_filter.new_image_pairs_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_image_pairs_t
    __del__ = lambda self : None;
image_pairs_t_swigregister = _geom_filter.image_pairs_t_swigregister
image_pairs_t_swigregister(image_pairs_t)


def image_pairs_new():
  return _geom_filter.image_pairs_new()
image_pairs_new = _geom_filter.image_pairs_new

def image_pairs_delete(*args):
  return _geom_filter.image_pairs_delete(*args)
image_pairs_delete = _geom_filter.image_pairs_delete

def image_pairs_add_match_vw(*args):
  return _geom_filter.image_pairs_add_match_vw(*args)
image_pairs_add_match_vw = _geom_filter.image_pairs_add_match_vw

def image_pairs_filter_lowehough(*args):
  return _geom_filter.image_pairs_filter_lowehough(*args)
image_pairs_filter_lowehough = _geom_filter.image_pairs_filter_lowehough
class TwoImageArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoImageArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TwoImageArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _geom_filter.new_TwoImageArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_TwoImageArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _geom_filter.TwoImageArray___getitem__(self, *args)
    def __setitem__(self, *args): return _geom_filter.TwoImageArray___setitem__(self, *args)
    def cast(self): return _geom_filter.TwoImageArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _geom_filter.TwoImageArray_frompointer
    if _newclass:frompointer = staticmethod(_geom_filter.TwoImageArray_frompointer)
TwoImageArray_swigregister = _geom_filter.TwoImageArray_swigregister
TwoImageArray_swigregister(TwoImageArray)

def TwoImageArray_frompointer(*args):
  return _geom_filter.TwoImageArray_frompointer(*args)
TwoImageArray_frompointer = _geom_filter.TwoImageArray_frompointer

class ImageMatchArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMatchArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMatchArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _geom_filter.new_ImageMatchArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_ImageMatchArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _geom_filter.ImageMatchArray___getitem__(self, *args)
    def __setitem__(self, *args): return _geom_filter.ImageMatchArray___setitem__(self, *args)
    def cast(self): return _geom_filter.ImageMatchArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _geom_filter.ImageMatchArray_frompointer
    if _newclass:frompointer = staticmethod(_geom_filter.ImageMatchArray_frompointer)
ImageMatchArray_swigregister = _geom_filter.ImageMatchArray_swigregister
ImageMatchArray_swigregister(ImageMatchArray)

def ImageMatchArray_frompointer(*args):
  return _geom_filter.ImageMatchArray_frompointer(*args)
ImageMatchArray_frompointer = _geom_filter.ImageMatchArray_frompointer

class PointMatchArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointMatchArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointMatchArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _geom_filter.new_PointMatchArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom_filter.delete_PointMatchArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _geom_filter.PointMatchArray___getitem__(self, *args)
    def __setitem__(self, *args): return _geom_filter.PointMatchArray___setitem__(self, *args)
    def cast(self): return _geom_filter.PointMatchArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _geom_filter.PointMatchArray_frompointer
    if _newclass:frompointer = staticmethod(_geom_filter.PointMatchArray_frompointer)
PointMatchArray_swigregister = _geom_filter.PointMatchArray_swigregister
PointMatchArray_swigregister(PointMatchArray)

def PointMatchArray_frompointer(*args):
  return _geom_filter.PointMatchArray_frompointer(*args)
PointMatchArray_frompointer = _geom_filter.PointMatchArray_frompointer



