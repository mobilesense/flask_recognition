# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_siftgeo', [dirname(__file__)])
        except ImportError:
            import _siftgeo
            return _siftgeo
        if fp is not None:
            try:
                _mod = imp.load_module('_siftgeo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _siftgeo = swig_import_helper()
    del swig_import_helper
else:
    import _siftgeo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class point_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["geom"] = _siftgeo.point_t_geom_set
    __swig_getmethods__["geom"] = _siftgeo.point_t_geom_get
    if _newclass:geom = _swig_property(_siftgeo.point_t_geom_get, _siftgeo.point_t_geom_set)
    __swig_setmethods__["dim"] = _siftgeo.point_t_dim_set
    __swig_getmethods__["dim"] = _siftgeo.point_t_dim_get
    if _newclass:dim = _swig_property(_siftgeo.point_t_dim_get, _siftgeo.point_t_dim_set)
    __swig_setmethods__["vw"] = _siftgeo.point_t_vw_set
    __swig_getmethods__["vw"] = _siftgeo.point_t_vw_get
    if _newclass:vw = _swig_property(_siftgeo.point_t_vw_get, _siftgeo.point_t_vw_set)
    __swig_setmethods__["desc"] = _siftgeo.point_t_desc_set
    __swig_getmethods__["desc"] = _siftgeo.point_t_desc_get
    if _newclass:desc = _swig_property(_siftgeo.point_t_desc_get, _siftgeo.point_t_desc_set)
    __swig_setmethods__["binsign"] = _siftgeo.point_t_binsign_set
    __swig_getmethods__["binsign"] = _siftgeo.point_t_binsign_get
    if _newclass:binsign = _swig_property(_siftgeo.point_t_binsign_get, _siftgeo.point_t_binsign_set)
    def __init__(self): 
        this = _siftgeo.new_point_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _siftgeo.delete_point_t
    __del__ = lambda self : None;
point_t_swigregister = _siftgeo.point_t_swigregister
point_t_swigregister(point_t)

class geom_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geom_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geom_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _siftgeo.geom_t_x_set
    __swig_getmethods__["x"] = _siftgeo.geom_t_x_get
    if _newclass:x = _swig_property(_siftgeo.geom_t_x_get, _siftgeo.geom_t_x_set)
    __swig_setmethods__["y"] = _siftgeo.geom_t_y_set
    __swig_getmethods__["y"] = _siftgeo.geom_t_y_get
    if _newclass:y = _swig_property(_siftgeo.geom_t_y_get, _siftgeo.geom_t_y_set)
    __swig_setmethods__["scale"] = _siftgeo.geom_t_scale_set
    __swig_getmethods__["scale"] = _siftgeo.geom_t_scale_get
    if _newclass:scale = _swig_property(_siftgeo.geom_t_scale_get, _siftgeo.geom_t_scale_set)
    __swig_setmethods__["angle"] = _siftgeo.geom_t_angle_set
    __swig_getmethods__["angle"] = _siftgeo.geom_t_angle_get
    if _newclass:angle = _swig_property(_siftgeo.geom_t_angle_get, _siftgeo.geom_t_angle_set)
    __swig_setmethods__["mi11"] = _siftgeo.geom_t_mi11_set
    __swig_getmethods__["mi11"] = _siftgeo.geom_t_mi11_get
    if _newclass:mi11 = _swig_property(_siftgeo.geom_t_mi11_get, _siftgeo.geom_t_mi11_set)
    __swig_setmethods__["mi12"] = _siftgeo.geom_t_mi12_set
    __swig_getmethods__["mi12"] = _siftgeo.geom_t_mi12_get
    if _newclass:mi12 = _swig_property(_siftgeo.geom_t_mi12_get, _siftgeo.geom_t_mi12_set)
    __swig_setmethods__["mi21"] = _siftgeo.geom_t_mi21_set
    __swig_getmethods__["mi21"] = _siftgeo.geom_t_mi21_get
    if _newclass:mi21 = _swig_property(_siftgeo.geom_t_mi21_get, _siftgeo.geom_t_mi21_set)
    __swig_setmethods__["mi22"] = _siftgeo.geom_t_mi22_set
    __swig_getmethods__["mi22"] = _siftgeo.geom_t_mi22_get
    if _newclass:mi22 = _swig_property(_siftgeo.geom_t_mi22_get, _siftgeo.geom_t_mi22_set)
    __swig_setmethods__["cornerness"] = _siftgeo.geom_t_cornerness_set
    __swig_getmethods__["cornerness"] = _siftgeo.geom_t_cornerness_get
    if _newclass:cornerness = _swig_property(_siftgeo.geom_t_cornerness_get, _siftgeo.geom_t_cornerness_set)
    def __init__(self): 
        this = _siftgeo.new_geom_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _siftgeo.delete_geom_t
    __del__ = lambda self : None;
geom_t_swigregister = _siftgeo.geom_t_swigregister
geom_t_swigregister(geom_t)

class pointset_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointset_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pointset_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _siftgeo.pointset_t_n_set
    __swig_getmethods__["n"] = _siftgeo.pointset_t_n_get
    if _newclass:n = _swig_property(_siftgeo.pointset_t_n_get, _siftgeo.pointset_t_n_set)
    __swig_setmethods__["pts"] = _siftgeo.pointset_t_pts_set
    __swig_getmethods__["pts"] = _siftgeo.pointset_t_pts_get
    if _newclass:pts = _swig_property(_siftgeo.pointset_t_pts_get, _siftgeo.pointset_t_pts_set)
    def __init__(self, *args): 
        this = _siftgeo.new_pointset_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _siftgeo.delete_pointset_t
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _siftgeo.pointset_t___getitem__(self, *args)
    def tostring(self, *args): return _siftgeo.pointset_t_tostring(self, *args)
    def fromstring(self, *args): return _siftgeo.pointset_t_fromstring(self, *args)
    def hasdescs(self): return _siftgeo.pointset_t_hasdescs(self)
pointset_t_swigregister = _siftgeo.pointset_t_swigregister
pointset_t_swigregister(pointset_t)


def pointset_alloc(*args):
  return _siftgeo.pointset_alloc(*args)
pointset_alloc = _siftgeo.pointset_alloc

def pointset_new():
  return _siftgeo.pointset_new()
pointset_new = _siftgeo.pointset_new

def pointset_from_vw(*args):
  return _siftgeo.pointset_from_vw(*args)
pointset_from_vw = _siftgeo.pointset_from_vw

def vw_from_pointset(*args):
  return _siftgeo.vw_from_pointset(*args)
vw_from_pointset = _siftgeo.vw_from_pointset

def pointset_delete(*args):
  return _siftgeo.pointset_delete(*args)
pointset_delete = _siftgeo.pointset_delete

def delete_points(*args):
  return _siftgeo.delete_points(*args)
delete_points = _siftgeo.delete_points

def vwgeoset_norm1(*args):
  return _siftgeo.vwgeoset_norm1(*args)
vwgeoset_norm1 = _siftgeo.vwgeoset_norm1

def vwgeoset_norm2(*args):
  return _siftgeo.vwgeoset_norm2(*args)
vwgeoset_norm2 = _siftgeo.vwgeoset_norm2

def siftgeo_to_vwgeo(*args):
  return _siftgeo.siftgeo_to_vwgeo(*args)
siftgeo_to_vwgeo = _siftgeo.siftgeo_to_vwgeo

def pointset_append(*args):
  return _siftgeo.pointset_append(*args)
pointset_append = _siftgeo.pointset_append

def pointset_affine_transform(*args):
  return _siftgeo.pointset_affine_transform(*args)
pointset_affine_transform = _siftgeo.pointset_affine_transform

def pointset_dup(*args):
  return _siftgeo.pointset_dup(*args)
pointset_dup = _siftgeo.pointset_dup

def read_point_t(*args):
  return _siftgeo.read_point_t(*args)
read_point_t = _siftgeo.read_point_t

def write_point_t(*args):
  return _siftgeo.write_point_t(*args)
write_point_t = _siftgeo.write_point_t

def count_points(*args):
  return _siftgeo.count_points(*args)
count_points = _siftgeo.count_points

def pointset_file_size_and_dim(*args):
  return _siftgeo.pointset_file_size_and_dim(*args)
pointset_file_size_and_dim = _siftgeo.pointset_file_size_and_dim

def read_points(*args):
  return _siftgeo.read_points(*args)
read_points = _siftgeo.read_points

def read_points_add(*args):
  return _siftgeo.read_points_add(*args)
read_points_add = _siftgeo.read_points_add

def read_points_add_with_mask(*args):
  return _siftgeo.read_points_add_with_mask(*args)
read_points_add_with_mask = _siftgeo.read_points_add_with_mask

def read_points_file(*args):
  return _siftgeo.read_points_file(*args)
read_points_file = _siftgeo.read_points_file

def read_points_string(*args):
  return _siftgeo.read_points_string(*args)
read_points_string = _siftgeo.read_points_string

def write_points(*args):
  return _siftgeo.write_points(*args)
write_points = _siftgeo.write_points

def write_points_string(*args):
  return _siftgeo.write_points_string(*args)
write_points_string = _siftgeo.write_points_string

def write_points_file(*args):
  return _siftgeo.write_points_file(*args)
write_points_file = _siftgeo.write_points_file

def pointset_read(*args):
  return _siftgeo.pointset_read(*args)
pointset_read = _siftgeo.pointset_read

def pointset_read_file_max(*args):
  return _siftgeo.pointset_read_file_max(*args)
pointset_read_file_max = _siftgeo.pointset_read_file_max

def pointset_read_cornerness(*args):
  return _siftgeo.pointset_read_cornerness(*args)
pointset_read_cornerness = _siftgeo.pointset_read_cornerness

def pointset_write(*args):
  return _siftgeo.pointset_write(*args)
pointset_write = _siftgeo.pointset_write

def display_points(*args):
  return _siftgeo.display_points(*args)
display_points = _siftgeo.display_points

def vwgeoset_sort(*args):
  return _siftgeo.vwgeoset_sort(*args)
vwgeoset_sort = _siftgeo.vwgeoset_sort

def vwgeoset_filter_n_cornerness_max(*args):
  return _siftgeo.vwgeoset_filter_n_cornerness_max(*args)
vwgeoset_filter_n_cornerness_max = _siftgeo.vwgeoset_filter_n_cornerness_max

def vwgeoset_filter_ma(*args):
  return _siftgeo.vwgeoset_filter_ma(*args)
vwgeoset_filter_ma = _siftgeo.vwgeoset_filter_ma

def vwgeoset_filter_ma_nkeep(*args):
  return _siftgeo.vwgeoset_filter_ma_nkeep(*args)
vwgeoset_filter_ma_nkeep = _siftgeo.vwgeoset_filter_ma_nkeep

def vwgeoset_filter_thresh_nkeep(*args):
  return _siftgeo.vwgeoset_filter_thresh_nkeep(*args)
vwgeoset_filter_thresh_nkeep = _siftgeo.vwgeoset_filter_thresh_nkeep

def vwgeoset_filter_duplicate_vw(*args):
  return _siftgeo.vwgeoset_filter_duplicate_vw(*args)
vwgeoset_filter_duplicate_vw = _siftgeo.vwgeoset_filter_duplicate_vw

def pointset_sort_by_cornerness(*args):
  return _siftgeo.pointset_sort_by_cornerness(*args)
pointset_sort_by_cornerness = _siftgeo.pointset_sort_by_cornerness

def pointset_sort_by_permutation(*args):
  return _siftgeo.pointset_sort_by_permutation(*args)
pointset_sort_by_permutation = _siftgeo.pointset_sort_by_permutation

def pointset_crop(*args):
  return _siftgeo.pointset_crop(*args)
pointset_crop = _siftgeo.pointset_crop

def pointset_crop_polygon(*args):
  return _siftgeo.pointset_crop_polygon(*args)
pointset_crop_polygon = _siftgeo.pointset_crop_polygon

def pointset_crop_n(*args):
  return _siftgeo.pointset_crop_n(*args)
pointset_crop_n = _siftgeo.pointset_crop_n

def pointset_filter_random(*args):
  return _siftgeo.pointset_filter_random(*args)
pointset_filter_random = _siftgeo.pointset_filter_random

def pointset_filter_cornerness(*args):
  return _siftgeo.pointset_filter_cornerness(*args)
pointset_filter_cornerness = _siftgeo.pointset_filter_cornerness

def vwgeoset_mask_binsign(*args):
  return _siftgeo.vwgeoset_mask_binsign(*args)
vwgeoset_mask_binsign = _siftgeo.vwgeoset_mask_binsign

def vwgeoset_cast(*args):
  return _siftgeo.vwgeoset_cast(*args)
vwgeoset_cast = _siftgeo.vwgeoset_cast

def new_PointsetArray(*args):
  return _siftgeo.new_PointsetArray(*args)
new_PointsetArray = _siftgeo.new_PointsetArray

def delete_PointsetArray(*args):
  return _siftgeo.delete_PointsetArray(*args)
delete_PointsetArray = _siftgeo.delete_PointsetArray

def PointsetArray_getitem(*args):
  return _siftgeo.PointsetArray_getitem(*args)
PointsetArray_getitem = _siftgeo.PointsetArray_getitem

def PointsetArray_setitem(*args):
  return _siftgeo.PointsetArray_setitem(*args)
PointsetArray_setitem = _siftgeo.PointsetArray_setitem

def siftgeo_to_fvecs(*args):
  return _siftgeo.siftgeo_to_fvecs(*args)
siftgeo_to_fvecs = _siftgeo.siftgeo_to_fvecs

def pointset_into_fvecs(*args):
  return _siftgeo.pointset_into_fvecs(*args)
pointset_into_fvecs = _siftgeo.pointset_into_fvecs
class siftgeo_binarize_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, siftgeo_binarize_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, siftgeo_binarize_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _siftgeo.siftgeo_binarize_t_d_set
    __swig_getmethods__["d"] = _siftgeo.siftgeo_binarize_t_d_get
    if _newclass:d = _swig_property(_siftgeo.siftgeo_binarize_t_d_get, _siftgeo.siftgeo_binarize_t_d_set)
    __swig_setmethods__["nproj"] = _siftgeo.siftgeo_binarize_t_nproj_set
    __swig_getmethods__["nproj"] = _siftgeo.siftgeo_binarize_t_nproj_get
    if _newclass:nproj = _swig_property(_siftgeo.siftgeo_binarize_t_nproj_get, _siftgeo.siftgeo_binarize_t_nproj_set)
    __swig_setmethods__["nbvw"] = _siftgeo.siftgeo_binarize_t_nbvw_set
    __swig_getmethods__["nbvw"] = _siftgeo.siftgeo_binarize_t_nbvw_get
    if _newclass:nbvw = _swig_property(_siftgeo.siftgeo_binarize_t_nbvw_get, _siftgeo.siftgeo_binarize_t_nbvw_set)
    __swig_setmethods__["p"] = _siftgeo.siftgeo_binarize_t_p_set
    __swig_getmethods__["p"] = _siftgeo.siftgeo_binarize_t_p_get
    if _newclass:p = _swig_property(_siftgeo.siftgeo_binarize_t_p_get, _siftgeo.siftgeo_binarize_t_p_set)
    __swig_setmethods__["medians"] = _siftgeo.siftgeo_binarize_t_medians_set
    __swig_getmethods__["medians"] = _siftgeo.siftgeo_binarize_t_medians_get
    if _newclass:medians = _swig_property(_siftgeo.siftgeo_binarize_t_medians_get, _siftgeo.siftgeo_binarize_t_medians_set)
    def __init__(self): 
        this = _siftgeo.new_siftgeo_binarize_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _siftgeo.delete_siftgeo_binarize_t
    __del__ = lambda self : None;
siftgeo_binarize_t_swigregister = _siftgeo.siftgeo_binarize_t_swigregister
siftgeo_binarize_t_swigregister(siftgeo_binarize_t)


def siftgeo_binarize_new(*args):
  return _siftgeo.siftgeo_binarize_new(*args)
siftgeo_binarize_new = _siftgeo.siftgeo_binarize_new

def siftgeo_binarize_pca_new(*args):
  return _siftgeo.siftgeo_binarize_pca_new(*args)
siftgeo_binarize_pca_new = _siftgeo.siftgeo_binarize_pca_new

def siftgeo_binarize(*args):
  return _siftgeo.siftgeo_binarize(*args)
siftgeo_binarize = _siftgeo.siftgeo_binarize

def siftgeo_binarize_ffq(*args):
  return _siftgeo.siftgeo_binarize_ffq(*args)
siftgeo_binarize_ffq = _siftgeo.siftgeo_binarize_ffq

def siftgeo_binarize_crop_nproj(*args):
  return _siftgeo.siftgeo_binarize_crop_nproj(*args)
siftgeo_binarize_crop_nproj = _siftgeo.siftgeo_binarize_crop_nproj

def siftgeo_binarize_ffq_table(*args):
  return _siftgeo.siftgeo_binarize_ffq_table(*args)
siftgeo_binarize_ffq_table = _siftgeo.siftgeo_binarize_ffq_table

def siftgeo_binarize_delete(*args):
  return _siftgeo.siftgeo_binarize_delete(*args)
siftgeo_binarize_delete = _siftgeo.siftgeo_binarize_delete

def siftgeo_binarize_fill_medians(*args):
  return _siftgeo.siftgeo_binarize_fill_medians(*args)
siftgeo_binarize_fill_medians = _siftgeo.siftgeo_binarize_fill_medians

def siftgeo_binarize_display(*args):
  return _siftgeo.siftgeo_binarize_display(*args)
siftgeo_binarize_display = _siftgeo.siftgeo_binarize_display

def read_sb_common(*args):
  return _siftgeo.read_sb_common(*args)
read_sb_common = _siftgeo.read_sb_common

def siftgeo_binarize_read(*args):
  return _siftgeo.siftgeo_binarize_read(*args)
siftgeo_binarize_read = _siftgeo.siftgeo_binarize_read

def write_sb_common(*args):
  return _siftgeo.write_sb_common(*args)
write_sb_common = _siftgeo.write_sb_common

def siftgeo_binarize_write(*args):
  return _siftgeo.siftgeo_binarize_write(*args)
siftgeo_binarize_write = _siftgeo.siftgeo_binarize_write

def siftgeo_binarize_full(*args):
  return _siftgeo.siftgeo_binarize_full(*args)
siftgeo_binarize_full = _siftgeo.siftgeo_binarize_full

def siftgeo_binarize_binsign_display(*args):
  return _siftgeo.siftgeo_binarize_binsign_display(*args)
siftgeo_binarize_binsign_display = _siftgeo.siftgeo_binarize_binsign_display

def he_transform_points(*args):
  return _siftgeo.he_transform_points(*args)
he_transform_points = _siftgeo.he_transform_points
class atoms_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atoms_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atoms_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _siftgeo.atoms_t_n_set
    __swig_getmethods__["n"] = _siftgeo.atoms_t_n_get
    if _newclass:n = _swig_property(_siftgeo.atoms_t_n_get, _siftgeo.atoms_t_n_set)
    __swig_setmethods__["d"] = _siftgeo.atoms_t_d_set
    __swig_getmethods__["d"] = _siftgeo.atoms_t_d_get
    if _newclass:d = _swig_property(_siftgeo.atoms_t_d_get, _siftgeo.atoms_t_d_set)
    __swig_setmethods__["nz"] = _siftgeo.atoms_t_nz_set
    __swig_getmethods__["nz"] = _siftgeo.atoms_t_nz_get
    if _newclass:nz = _swig_property(_siftgeo.atoms_t_nz_get, _siftgeo.atoms_t_nz_set)
    __swig_setmethods__["idx"] = _siftgeo.atoms_t_idx_set
    __swig_getmethods__["idx"] = _siftgeo.atoms_t_idx_get
    if _newclass:idx = _swig_property(_siftgeo.atoms_t_idx_get, _siftgeo.atoms_t_idx_set)
    __swig_setmethods__["val"] = _siftgeo.atoms_t_val_set
    __swig_getmethods__["val"] = _siftgeo.atoms_t_val_get
    if _newclass:val = _swig_property(_siftgeo.atoms_t_val_get, _siftgeo.atoms_t_val_set)
    def __init__(self): 
        this = _siftgeo.new_atoms_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _siftgeo.delete_atoms_t
    __del__ = lambda self : None;
atoms_t_swigregister = _siftgeo.atoms_t_swigregister
atoms_t_swigregister(atoms_t)


def atoms_new(*args):
  return _siftgeo.atoms_new(*args)
atoms_new = _siftgeo.atoms_new

def atoms_free(*args):
  return _siftgeo.atoms_free(*args)
atoms_free = _siftgeo.atoms_free

def atoms_add_spvec(*args):
  return _siftgeo.atoms_add_spvec(*args)
atoms_add_spvec = _siftgeo.atoms_add_spvec

def atoms_read(*args):
  return _siftgeo.atoms_read(*args)
atoms_read = _siftgeo.atoms_read

def atoms_write(*args):
  return _siftgeo.atoms_write(*args)
atoms_write = _siftgeo.atoms_write

def atoms_display(*args):
  return _siftgeo.atoms_display(*args)
atoms_display = _siftgeo.atoms_display

def atoms_mul_fvec(*args):
  return _siftgeo.atoms_mul_fvec(*args)
atoms_mul_fvec = _siftgeo.atoms_mul_fvec

def atoms_crop(*args):
  return _siftgeo.atoms_crop(*args)
atoms_crop = _siftgeo.atoms_crop

def atoms_sort_indices(*args):
  return _siftgeo.atoms_sort_indices(*args)
atoms_sort_indices = _siftgeo.atoms_sort_indices

def point_to_points_dis(*args):
  return _siftgeo.point_to_points_dis(*args)
point_to_points_dis = _siftgeo.point_to_points_dis

def vwsgeo_to_bof(*args):
  return _siftgeo.vwsgeo_to_bof(*args)
vwsgeo_to_bof = _siftgeo.vwsgeo_to_bof

def atoms_new_hadamard_inter(*args):
  return _siftgeo.atoms_new_hadamard_inter(*args)
atoms_new_hadamard_inter = _siftgeo.atoms_new_hadamard_inter

def atoms_new_random_by_support(*args):
  return _siftgeo.atoms_new_random_by_support(*args)
atoms_new_random_by_support = _siftgeo.atoms_new_random_by_support

def atoms_new_random_by_sparsity_rate(*args):
  return _siftgeo.atoms_new_random_by_sparsity_rate(*args)
atoms_new_random_by_sparsity_rate = _siftgeo.atoms_new_random_by_sparsity_rate

def atoms_new_aggregate_components(*args):
  return _siftgeo.atoms_new_aggregate_components(*args)
atoms_new_aggregate_components = _siftgeo.atoms_new_aggregate_components

def atoms_signature(*args):
  return _siftgeo.atoms_signature(*args)
atoms_signature = _siftgeo.atoms_signature

def atoms_signature_fvec(*args):
  return _siftgeo.atoms_signature_fvec(*args)
atoms_signature_fvec = _siftgeo.atoms_signature_fvec

def hesp_signature(*args):
  return _siftgeo.hesp_signature(*args)
hesp_signature = _siftgeo.hesp_signature
class PointsetArray:
  """ array owns its pointsets """

  def __init__(self,n):
    self.this=new_PointsetArray(n)
    self.n=n
    for i in range(n):
      x=pointset_t(); x.thisown=False
      PointsetArray_setitem(self.this,i,x)
      
  def __getitem__(self,i):
    return PointsetArray_getitem(self.this,i)

  def __setitem__(self,i,ps):
    x=PointsetArray_getitem(self.this,i)
    x.thisown=True # dealloc old one
    PointsetArray_setitem(self.this,i,ps)        
    ps.thisown=False

  def __del__(self):
    for i in range(self.n):
      x=PointsetArray_getitem(self.this,i)
      x.thisown=True
    delete_PointsetArray(self.this)


def unpickle_pointset_t(fmt,s,d):
  ps=pointset_t()
  ps.fromstring(s,fmt)
  return ps

def pointset_t_reduce(self):
  hd=self.hasdescs()
  if hd in (0,1): fmt=2
  elif hd==2: fmt=0
  else: raise RuntimeError("cannot pickle mixed pointset")  
  return (unpickle_pointset_t,(fmt,self.tostring(fmt),{}))

pointset_t.__reduce__=pointset_t_reduce





